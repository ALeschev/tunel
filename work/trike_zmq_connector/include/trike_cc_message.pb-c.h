/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: trike_cc_message.proto */

#ifndef PROTOBUF_C_trike_5fcc_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_trike_5fcc_5fmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _TrikeCCMessage TrikeCCMessage;


/* --- enums --- */


/* --- messages --- */

struct  _TrikeCCMessage
{
  ProtobufCMessage base;
  ProtobufCBinaryData dialog_id;
  int32_t request_id;
  ProtobufCBinaryData data;
};
#define TRIKE_CCMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trike_ccmessage__descriptor) \
    , {0,NULL}, 0, {0,NULL} }


/* TrikeCCMessage methods */
void   trike_ccmessage__init
                     (TrikeCCMessage         *message);
size_t trike_ccmessage__get_packed_size
                     (const TrikeCCMessage   *message);
size_t trike_ccmessage__pack
                     (const TrikeCCMessage   *message,
                      uint8_t             *out);
size_t trike_ccmessage__pack_to_buffer
                     (const TrikeCCMessage   *message,
                      ProtobufCBuffer     *buffer);
TrikeCCMessage *
       trike_ccmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trike_ccmessage__free_unpacked
                     (TrikeCCMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TrikeCCMessage_Closure)
                 (const TrikeCCMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor trike_ccmessage__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_trike_5fcc_5fmessage_2eproto__INCLUDED */
